// COMPLETE CORDA R3 BUILD - All dependencies included
// This includes Spring Security, Kotlin runtime, and all Corda dependencies

buildscript {
    ext {
        corda_release_version = '4.10'
        kotlin_version = '1.2.71'
        spring_boot_version = '2.7.14'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.7.14"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.15.RELEASE"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.71"
    }
}


plugins {
    id 'org.springframework.boot' version '2.7.14'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
}

group = 'com.healthcare'
version = '1.0.0'
sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

bootRun {
    jvmArgs = [
            '--add-opens=java.base/java.time=ALL-UNNAMED',
            '--add-opens=java.base/java.io=ALL-UNNAMED',
            '--add-opens=java.base/java.util=ALL-UNNAMED',
            '--add-opens=java.base/java.nio=ALL-UNNAMED',
            '--add-opens=java.base/java.lang=ALL-UNNAMED',
            '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
            '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED'
    ]
}

dependencies {
    // Spring Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    // SPRING SECURITY (was missing)


    implementation 'org.apache.activemq:artemis-core-client:2.19.1'
    implementation 'org.apache.activemq:artemis-commons:2.19.1'
    implementation 'org.apache.activemq:artemis-server:2.19.1'
    implementation 'org.apache.activemq:artemis-jms-client:2.19.1'
    implementation 'org.apache.activemq:artemis-journal:2.19.1'
    implementation 'org.apache.activemq:artemis-selector:2.19.1'
    implementation 'org.apache.activemq:artemis-jms-server:2.19.1'

    implementation 'io.github.classgraph:classgraph:4.8.149'
    implementation 'org.apache.qpid:proton-j:0.34.1'
    implementation 'org.apache.qpid:qpid-jms-client:0.53.0'

    implementation 'io.reactivex:rxjava:1.3.8'

    implementation 'net.i2p.crypto:eddsa:0.3.0'

    implementation 'io.netty:netty-all:4.1.77.Final'
    implementation 'io.netty:netty-transport-native-epoll:4.1.77.Final'
    implementation 'io.netty:netty-transport-native-kqueue:4.1.77.Final'

    implementation 'org.apache.shiro:shiro-core:1.10.1'
    implementation 'com.esotericsoftware:kryo:5.4.0'
    implementation 'de.javakaffee:kryo-serializers:0.45'
    implementation 'org.objenesis:objenesis:3.3'
    implementation 'com.typesafe:config:1.4.2'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'javax.validation:validation-api:2.0.1.Final'

    // Database
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'com.h2database:h2:2.1.214'

    // KOTLIN RUNTIME (required for Corda)
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.2.71'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.2.71'

    // Additional utilities
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.2.12'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    implementation 'org.jetbrains:annotations:24.0.1'

    // REAL CORDA DEPENDENCIES - From libs folder
    implementation fileTree(dir: 'libs', include: ['corda-core-*.jar'])
    implementation fileTree(dir: 'libs', include: ['corda-rpc-*.jar'])
    implementation fileTree(dir: 'libs', include: ['corda-jackson-*.jar'])
    implementation fileTree(dir: 'libs', include: ['corda-serialization-*.jar'])
    implementation fileTree(dir: 'libs', include: ['corda-node-api-*.jar'])
    implementation fileTree(dir: 'libs', include: ['corda-common-*.jar'])
    implementation fileTree(dir: 'libs', include: ['quasar-core-*.jar'])

    // Test dependencies
    testImplementation fileTree(dir: 'libs', include: ['corda-node-driver-*.jar'])
    testImplementation fileTree(dir: 'libs', include: ['corda-test-utils-*.jar'])
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'junit:junit:4.13.2'
}

// Simple Java compilation
compileJava {
    options.compilerArgs << "-parameters"
    options.fork = true
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Spring Boot configuration
springBoot {
    mainClass = 'com.healthcare.HealthcareBlockchainApplication'
}

jar {
    enabled = false
    archiveBaseName = 'healthcare-blockchain'
}

bootJar {
    archiveBaseName = 'healthcare-blockchain'
    archiveVersion = project.version
}

// =====================================================
// CORDA TASKS - SIMPLIFIED
// =====================================================

task createCordaNode {
    group = 'corda'
    description = 'Create Corda node'
    doLast {
        // Create node directory
        mkdir 'corda-node'

        // Copy corda.jar if it exists
        def cordaJar = file('libs/corda.jar')
        if (cordaJar.exists()) {
            copy {
                from cordaJar
                into 'corda-node'
            }
            println 'Copied corda.jar to node directory'
        } else {
            println 'ERROR: corda.jar not found in libs folder'
            return
        }

        // Create simple node.conf
        def nodeConf = file('corda-node/node.conf')
        nodeConf.text = '''myLegalName="O=HealthcareNode,L=NewYork,C=US"
p2pAddress="localhost:10005"
rpcSettings {
    address="localhost:10006"
    adminAddress="localhost:10046"
}
rpcUsers=[
    {
        user=healthcare
        password=healthcare123
        permissions=[ALL]
    }
]
devMode=true
notary {
    validating=true
}
dataSourceProperties {
    dataSourceClassName="org.h2.jdbcx.JdbcDataSource"
    dataSource.url="jdbc:h2:file:./persistence;DB_CLOSE_ON_EXIT=FALSE"
    dataSource.user="sa"
    dataSource.password=""
}
detectPublicIp=false
'''

        println 'Created node.conf'
        println ''
        println 'CORDA NODE READY!'
        println 'To start: cd corda-node && java -jar corda.jar'
    }
}

task verifyJars {
    group = 'verification'
    description = 'Check JAR files in libs folder'
    doLast {
        println 'Checking libs folder...'

        def libsDir = file('libs')
        if (!libsDir.exists()) {
            println 'ERROR: libs folder does not exist'
            return
        }

        def jars = []
        libsDir.listFiles().each { file ->
            if (file.name.endsWith('.jar')) {
                jars << file.name
            }
        }

        println "Found ${jars.size()} JAR files:"
        jars.sort().each { jar ->
            println "  - $jar"
        }

        // Check essential JARs
        def essential = [
                'corda-core-4.10.jar',
                'corda-rpc-4.10.jar',
                'corda-jackson-4.10.jar',
                'corda-serialization-4.10.jar',
                'corda-node-api-4.10.jar',
                'corda.jar',
                'quasar-core-0.7.15_r3.jar'
        ]

        println ''
        println 'Essential JARs status:'
        essential.each { jar ->
            if (jars.contains(jar)) {
                println "  ‚úÖ $jar"
            } else {
                println "  ‚ùå $jar (MISSING)"
            }
        }
    }
}

task startNode {
    group = 'corda'
    description = 'Start Corda node'
    dependsOn 'createCordaNode'
    doLast {
        println 'Starting Corda node...'
        exec {
            workingDir file('corda-node')
            commandLine 'java', '-jar', 'corda.jar'
        }
    }
}

task runApp(type: JavaExec, dependsOn: 'classes') {
    group = 'application'
    description = 'Run Spring Boot application'
    main = 'com.healthcare.HealthcareBlockchainApplication'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'spring.profiles.active', 'real-corda'
}

task fixJavaFiles {
    group = 'setup'
    description = 'Fix Java file structure issues'
    doLast {
        println 'Fixing Java file structure...'

        // Create separate flow files
        mkdir 'src/main/java/com/healthcare/flows'

        println 'Java files need to be split manually:'
        println '1. PatientRegistrationInitiator.java'
        println '2. PatientUpdateInitiator.java'
        println '3. PatientQueryFlow.java'
        println ''
        println 'Each public class must be in its own file!'
    }
}

task quickHelp {
    group = 'help'
    description = 'Show quick setup help'
    doLast {
        println '''
HEALTHCARE BLOCKCHAIN QUICK SETUP:
===================================

üö® FIRST: Fix Java file structure issues:
1. Split PatientRegistrationFlow.java into 3 separate files
2. Each public class needs its own file

üìã STEPS:
1. ./gradlew fixJavaFiles     # Get file splitting instructions
2. ./gradlew verifyJars       # Check JARs are present
3. ./gradlew clean build      # Build project
4. ./gradlew createCordaNode  # Create blockchain node
5. cd corda-node && java -jar corda.jar  # Start blockchain
6. ./gradlew runApp           # Start API

üîß If missing JARs, copy from:
C:\\Users\\yeapz\\Downloads\\community-4.10\\

‚úÖ This will be 100% real Corda R3 blockchain!
'''
    }
}

wrapper {
    gradleVersion = '8.4'
    distributionType = Wrapper.DistributionType.BIN
}